import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_redux/flutter_redux.dart';
import 'package:invoiceninja_flutter/redux/ui/ui_actions.dart';
import 'package:invoiceninja_flutter/ui/stub/stub_screen.dart';
import 'package:redux/redux.dart';
import 'package:invoiceninja_flutter/ui/app/dialogs/error_dialog.dart';
import 'package:invoiceninja_flutter/ui/stub/view/stub_view_vm.dart';
import 'package:invoiceninja_flutter/redux/stub/stub_actions.dart';
import 'package:invoiceninja_flutter/data/models/stub_model.dart';
import 'package:invoiceninja_flutter/ui/stub/edit/stub_edit.dart';
import 'package:invoiceninja_flutter/redux/app/app_state.dart';

class StubEditScreen extends StatelessWidget {
  const StubEditScreen({Key key}) : super(key: key);
  static const String route = '/stub/edit';

  @override
  Widget build(BuildContext context) {
    return StoreConnector<AppState, StubEditVM>(
      converter: (Store<AppState> store) {
        return StubEditVM.fromStore(store);
      },
      builder: (context, viewModel) {
        return StubEdit(
          viewModel: viewModel,
        );
      },
    );
  }
}

class StubEditVM {
  StubEditVM({
    @required this.stub,
    @required this.onChanged,
    @required this.isSaving,
    @required this.origStub,
    @required this.onSavePressed,
    @required this.onBackPressed,
    @required this.isLoading,
  });

  factory StubEditVM.fromStore(Store<AppState> store) {
    final stub = store.state.stubUIState.editing;
    final state = store.state;

    return StubEditVM(
      isLoading: state.isLoading,
      isSaving: state.isSaving,
      origStub: state.stubState.map[stub.id],
      stub: stub,
      onChanged: (StubEntity stub) {
        store.dispatch(UpdateStub(stub));
      },
      onBackPressed: () {
        store.dispatch(UpdateCurrentRoute(StubScreen.route));
      },
      onSavePressed: (BuildContext context) {
        final Completer<Null> completer = new Completer<Null>();
        store.dispatch(SaveStubRequest(completer: completer, stub: stub));
        return completer.future.then((_) {
            return completer.future.then((savedStub) {
              if (stub.isNew) {
                Navigator.of(context).pushReplacementNamed(StubViewScreen.route);
              } else {
                Navigator.of(context).pop(savedStub);
              }
            }).catchError((Object error) {
              showDialog<ErrorDialog>(
                  context: context,
                  builder: (BuildContext context) {
                    return ErrorDialog(error);
                  });
            });
        });
      },
    );
  }

  final StubEntity stub;
  final Function(StubEntity) onChanged;
  final Function(BuildContext) onSavePressed;
  final Function onBackPressed;
  final bool isLoading;
}
