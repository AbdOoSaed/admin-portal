import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:invoiceninja_flutter/redux/app/app_actions.dart';
import 'package:invoiceninja_flutter/data/models/models.dart';
import 'package:invoiceninja_flutter/ui/app/entities/entity_actions_dialog.dart';
import 'package:invoiceninja_flutter/ui/app/lists/list_divider.dart';
import 'package:invoiceninja_flutter/ui/app/loading_indicator.dart';
import 'package:invoiceninja_flutter/ui/app/help_text.dart';
import 'package:invoiceninja_flutter/ui/app/snackbar_row.dart';
import 'package:invoiceninja_flutter/ui/stub/stub_list_item.dart';
import 'package:invoiceninja_flutter/ui/stub/stub_list_vm.dart';
import 'package:invoiceninja_flutter/ui/app/presenters/entity_presenter.dart';
import 'package:invoiceninja_flutter/ui/app/tables/entity_datatable.dart';
import 'package:invoiceninja_flutter/utils/icons.dart';
import 'package:invoiceninja_flutter/utils/localization.dart';
import 'package:invoiceninja_flutter/utils/platforms.dart';

class StubList extends StatefulWidget {
  const StubList({
    Key key,
    @required this.viewModel,
  }) : super(key: key);

  final StubListVM viewModel;

  @override
  _StubListState createState() => _StubListState();
}

class _StubListState extends State<StubList> {

  EntityDataTableSource dataTableSource;

  @override
  void initState() {
    super.initState();

    final viewModel = widget.viewModel;

    dataTableSource = EntityDataTableSource(
        context: context,
        entityType: EntityType.stub,
        editingId: viewModel.state.stubUIState.editing.id,
        tableColumns: viewModel.tableColumns,
        entityList: viewModel.stubList,
        entityMap: viewModel.stubMap,
        entityPresenter: StubPresenter(),
        onTap: (BaseEntity stub) =>
            viewModel.onStubTap(context, stub));
  }

  @override
  void didUpdateWidget(StubList oldWidget) {
    super.didUpdateWidget(oldWidget);

    final viewModel = widget.viewModel;
    dataTableSource.editingId = viewModel.state.stubUIState.editing.id;
    dataTableSource.entityList = viewModel.stubList;
    dataTableSource.entityMap = viewModel.stubMap;

    // ignore: invalid_use_of_visible_for_testing_member, invalid_use_of_protected_member
    dataTableSource.notifyListeners();
  }


  @override
  Widget build(BuildContext context) {
    /*
    final localization = AppLocalization.of(context);
    final listState = viewModel.listState;
    final filteredClientId = listState.filterEntityId;
    final filteredClient =
        filteredClientId != null ? viewModel.clientMap[filteredClientId] : null;
    */
    final store = StoreProvider.of<AppState>(context);
    final listUIState = store.state.uiState.stubUIState.listUIState;
    final isInMultiselect = listUIState.isInMultiselect();
    final stubList = viewModel.stubList;

    if (isNotMobile(context) &&
        stubList.isNotEmpty &&
        !state.uiState.isEditing &&
        !stubList.contains(state.stubUIState.selectedId)) {
      viewEntityById(
          context: context,
          entityType: EntityType.stub,
          entityId: stubList.first);
    }

    return Column(
      children: <Widget>[
      
              Expanded(
                child: !viewModel.isLoaded
                    ? LoadingIndicator()
                    : RefreshIndicator(
                        onRefresh: () => viewModel.onRefreshed(context),
                        child: viewModel.stubList.isEmpty
                            ? HelpText(AppLocalization.of(context).noRecordsFound)
                            : ListView.separated(
                                shrinkWrap: true,
                                separatorBuilder: (context, index) => ListDivider(),
                                itemCount: viewModel.stubList.length,
                                itemBuilder: (BuildContext context, index) {
                                  final stubId = viewModel.stubList[index];
                                  final stub = viewModel.stubMap[stubId];
                                  final userCompany = viewModel.userCompany;

                              void showDialog() => showEntityActionsDialog(
                                    userCompany: userCompany,
                                  entity: stub,
                                  context: context,
                                  onEntityAction: viewModel.onEntityAction);

                                  return StubListItem(
                                     user: viewModel.userCompany.user,
                                     filter: viewModel.filter,
                                     stub: stub,
                                     onTap: () =>
                                         viewModel.onStubTap(context, stub),
                                     onEntityAction: (EntityAction action) {
                                       if (action == EntityAction.more) {
                                         showDialog();
                                       } else {
                                         viewModel.onEntityAction(
                                             context, stub, action);
                                       }
                                     },
                                     onLongPress: () =>
                                         showDialog(),
                                   );
                                },
                              ),
                      ),
              ),
      ],
    );
  }
}
